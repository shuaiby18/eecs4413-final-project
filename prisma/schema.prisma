generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(cuid())
  name               String?
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole   @default(USER)
  isTwoFactorEnabled Boolean    @default(false)
  accounts           Account[]
  CartItem           CartItem[]
  orders             Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  price       Float
  description String?
  author      String
  categoryId  Int
  path        String
  thumbnail   String
  CartItem    CartItem[]
  category    Category   @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  userId    String
  productId Int
  orderId   String?
  order     Order?  @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                String           @id @default(cuid())
  userId            String
  shippingAddressId String?
  paymentInfoId     String?
  createdAt         DateTime         @default(now())
  checkouted        Boolean          @default(false)
  items             CartItem[]
  paymentInfo       CreditCardInfo?  @relation(fields: [paymentInfoId], references: [id], onDelete: Cascade)
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingAddress {
  id         String  @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  Order      Order[]
}

model CreditCardInfo {
  id        String  @id @default(cuid())
  number    String
  expiMonth Int
  expiYear  Int
  cvv       Int
  Order     Order[]
}

enum UserRole {
  ADMIN
  USER
}
